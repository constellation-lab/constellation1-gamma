{
    "contract_name": "cdt_token",
    "contract_version": "0.1.0",
    "idl_version": "1.0.0",
    "instantiate": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InstantiateMsg",
      "type": "object",
      "required": [
        "name",
        "symbol",
        "decimals",
        "initial_balances",
        "mint",
        "marketing"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "decimals": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "initial_balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cw20Coin"
          }
        },
        "mint": {
          "anyOf": [
            {
              "$ref": "#/definitions/MinterResponse"
            },
            {
              "type": "null"
            }
          ]
        },
        "marketing": {
          "anyOf": [
            {
              "$ref": "#/definitions/InstantiateMarketingInfo"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Cw20Coin": {
          "type": "object",
          "required": [
            "address",
            "amount"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        },
        "InstantiateMarketingInfo": {
          "type": "object",
          "properties": {
            "project": {
              "type": [
                "string",
                "null"
              ]
            },
            "description": {
              "type": [
                "string",
                "null"
              ]
            },
            "marketing": {
              "type": [
                "string",
                "null"
              ]
            },
            "logo": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Logo"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Logo": {
          "description": "This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.",
          "anyOf": [
            {
              "description": "A reference to an externally hosted logo. Must be a valid HTTP or HTTPS URL.",
              "type": "object",
              "required": [
                "url"
              ],
              "properties": {
                "url": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Logo content stored on the blockchain. Enforce maximum size of 5KB on all variants",
              "type": "object",
              "required": [
                "embedded"
              ],
              "properties": {
                "embedded": {
                  "$ref": "#/definitions/EmbeddedLogo"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "EmbeddedLogo": {
          "description": "This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.",
          "anyOf": [
            {
              "description": "Store the Logo as an SVG file. The content must conform to the spec at https://en.wikipedia.org/wiki/Scalable_Vector_Graphics (The contract should do some light-weight sanity-check validation)",
              "type": "object",
              "required": [
                "svg"
              ],
              "properties": {
                "svg": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Store the Logo as a PNG file. This will likely only support up to 64x64 or so within the 5KB limit.",
              "type": "object",
              "required": [
                "png"
              ],
              "properties": {
                "png": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "MinterResponse": {
          "description": "The minter represents the minting authority. Returns the current minter as well as the cap on the amount that can be minted if there is one.",
          "type": "object",
          "required": [
            "minter",
            "cap"
          ],
          "properties": {
            "minter": {
              "type": "string"
            },
            "cap": {
              "description": "The cap is a hard cap on the supply that can be achieved by minting. Note that this refers to total_supply, not the amount that can be minted by the minter. If there is no cap, use the sentinel value Uint128::MAX, which is larger than any current token supply and also larger than 2^64, which is plenty for any reasonable use case.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      }
    },
    "execute": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ExecuteMsg",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "transfer"
          ],
          "properties": {
            "transfer": {
              "type": "object",
              "required": [
                "recipient",
                "amount"
              ],
              "properties": {
                "recipient": {
                  "type": "string"
                },
                "amount": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "burn"
          ],
          "properties": {
            "burn": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "amount": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "mint"
          ],
          "properties": {
            "mint": {
              "type": "object",
              "required": [
                "recipient",
                "amount"
              ],
              "properties": {
                "recipient": {
                  "type": "string"
                },
                "amount": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "send"
          ],
          "properties": {
            "send": {
              "type": "object",
              "required": [
                "contract",
                "amount",
                "msg"
              ],
              "properties": {
                "contract": {
                  "type": "string"
                },
                "amount": {
                  "$ref": "#/definitions/Uint128"
                },
                "msg": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "increase_allowance"
          ],
          "properties": {
            "increase_allowance": {
              "type": "object",
              "required": [
                "spender",
                "amount"
              ],
              "properties": {
                "spender": {
                  "type": "string"
                },
                "amount": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "decrease_allowance"
          ],
          "properties": {
            "decrease_allowance": {
              "type": "object",
              "required": [
                "spender",
                "amount"
              ],
              "properties": {
                "spender": {
                  "type": "string"
                },
                "amount": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "transfer_from"
          ],
          "properties": {
            "transfer_from": {
              "type": "object",
              "required": [
                "owner",
                "recipient",
                "amount"
              ],
              "properties": {
                "owner": {
                  "type": "string"
                },
                "recipient": {
                  "type": "string"
                },
                "amount": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "burn_from"
          ],
          "properties": {
            "burn_from": {
              "type": "object",
              "required": [
                "owner",
                "amount"
              ],
              "properties": {
                "owner": {
                  "type": "string"
                },
                "amount": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "send_from"
          ],
          "properties": {
            "send_from": {
              "type": "object",
              "required": [
                "owner",
                "contract",
                "amount",
                "msg"
              ],
              "properties": {
                "owner": {
                  "type": "string"
                },
                "contract": {
                  "type": "string"
                },
                "amount": {
                  "$ref": "#/definitions/Uint128"
                },
                "msg": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "vote"
          ],
          "properties": {
            "vote": {
              "type": "object",
              "required": [
                "proposal_id",
                "vote"
              ],
              "properties": {
                "proposal_id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "vote": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ],
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "query": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "QueryMsg",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "balance"
          ],
          "properties": {
            "balance": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "token_info"
          ],
          "properties": {
            "token_info": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "allowance"
          ],
          "properties": {
            "allowance": {
              "type": "object",
              "required": [
                "owner",
                "spender"
              ],
              "properties": {
                "owner": {
                  "type": "string"
                },
                "spender": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "all_allowances"
          ],
          "properties": {
            "all_allowances": {
              "type": "object",
              "required": [
                "owner"
              ],
              "properties": {
                "owner": {
                  "type": "string"
                },
                "start_after": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "limit": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "all_accounts"
            ],
            "properties": {
              "all_accounts": {
                "type": "object",
                "properties": {
                  "start_after": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "limit": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "minter"
            ],
            "properties": {
              "minter": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "marketing_info"
            ],
            "properties": {
              "marketing_info": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "download_logo"
            ],
            "properties": {
              "download_logo": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "voting_power"
            ],
            "properties": {
              "voting_power": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "migrate": null,
      "sudo": null,
      "responses": {
        "voting_power": {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "Uint128",
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }