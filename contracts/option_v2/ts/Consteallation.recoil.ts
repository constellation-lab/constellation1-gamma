/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClient } from "./chain";
import { InstantiateMsg, ExecuteMsg, Uint128, Coin, QueryMsg, Addr, State, Timestamp, Uint64, ArrayOfTupleOfUint64AndData, Data } from "./Consteallation.types";
import { ConsteallationQueryClient } from "./Consteallation.client";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<ConsteallationQueryClient, QueryClientParams>({
  key: "consteallationQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new ConsteallationQueryClient(client, contractAddress);
  }
});
export const configSelector = selectorFamily<State, QueryClientParams & {
  params: Parameters<ConsteallationQueryClient["config"]>;
}>({
  key: "consteallationConfig",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.config(...params);
  }
});
export const optionsSelector = selectorFamily<ArrayOfTupleOfUint64AndData, QueryClientParams & {
  params: Parameters<ConsteallationQueryClient["options"]>;
}>({
  key: "consteallationOptions",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.options(...params);
  }
});
export const optionsPageSelector = selectorFamily<ArrayOfTupleOfUint64AndData, QueryClientParams & {
  params: Parameters<ConsteallationQueryClient["optionsPage"]>;
}>({
  key: "consteallationOptionsPage",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.optionsPage(...params);
  }
});
export const getOptionByidSelector = selectorFamily<Data, QueryClientParams & {
  params: Parameters<ConsteallationQueryClient["getOptionByid"]>;
}>({
  key: "consteallationGetOptionByid",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.getOptionByid(...params);
  }
});
export const marketOptionsSelector = selectorFamily<ArrayOfTupleOfUint64AndData, QueryClientParams & {
  params: Parameters<ConsteallationQueryClient["marketOptions"]>;
}>({
  key: "consteallationMarketOptions",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.marketOptions(...params);
  }
});
export const maketOptionsPageeSelector = selectorFamily<ArrayOfTupleOfUint64AndData, QueryClientParams & {
  params: Parameters<ConsteallationQueryClient["maketOptionsPagee"]>;
}>({
  key: "consteallationMaketOptionsPagee",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.maketOptionsPagee(...params);
  }
});
export const createorOptionsSelector = selectorFamily<ArrayOfTupleOfUint64AndData, QueryClientParams & {
  params: Parameters<ConsteallationQueryClient["createorOptions"]>;
}>({
  key: "consteallationCreateorOptions",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.createorOptions(...params);
  }
});
export const ownerOptionsSelector = selectorFamily<ArrayOfTupleOfUint64AndData, QueryClientParams & {
  params: Parameters<ConsteallationQueryClient["ownerOptions"]>;
}>({
  key: "consteallationOwnerOptions",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.ownerOptions(...params);
  }
});