/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { InstantiateMsg, ExecuteMsg, Uint128, Coin, QueryMsg, Addr, State, Timestamp, Uint64, ArrayOfTupleOfUint64AndData, Data, Boolean } from "./Constellation.types";
import { ConstellationQueryClient } from "./Constellation.client";
export const constellationQueryKeys = {
  contract: ([{
    contract: "constellation"
  }] as const),
  address: (contractAddress: string) => ([{ ...constellationQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...constellationQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  options: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...constellationQueryKeys.address(contractAddress)[0],
    method: "options",
    args
  }] as const),
  optionsPage: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...constellationQueryKeys.address(contractAddress)[0],
    method: "options_page",
    args
  }] as const),
  getOptionByid: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...constellationQueryKeys.address(contractAddress)[0],
    method: "get_option_byid",
    args
  }] as const),
  createorOptions: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...constellationQueryKeys.address(contractAddress)[0],
    method: "createor_options",
    args
  }] as const),
  ownerOptions: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...constellationQueryKeys.address(contractAddress)[0],
    method: "owner_options",
    args
  }] as const),
  getIsApprove: (contractAddress: string, args?: Record<string, unknown>) => ([{ ...constellationQueryKeys.address(contractAddress)[0],
    method: "get_is_approve",
    args
  }] as const)
};
export const constellationQueries = {
  config: <TData = State,>({
    client,
    options
  }: ConstellationConfigQuery<TData>): UseQueryOptions<State, Error, TData> => ({
    queryKey: constellationQueryKeys.config(client?.contractAddress),
    queryFn: () => client.config(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  options: <TData = ArrayOfTupleOfUint64AndData,>({
    client,
    options
  }: ConstellationOptionsQuery<TData>): UseQueryOptions<ArrayOfTupleOfUint64AndData, Error, TData> => ({
    queryKey: constellationQueryKeys.options(client?.contractAddress),
    queryFn: () => client.options(),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  optionsPage: <TData = ArrayOfTupleOfUint64AndData,>({
    client,
    args,
    options
  }: ConstellationOptionsPageQuery<TData>): UseQueryOptions<ArrayOfTupleOfUint64AndData, Error, TData> => ({
    queryKey: constellationQueryKeys.optionsPage(client?.contractAddress, args),
    queryFn: () => client.optionsPage({
      amount: args.amount,
      key: args.key
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getOptionByid: <TData = Data,>({
    client,
    args,
    options
  }: ConstellationGetOptionByidQuery<TData>): UseQueryOptions<Data, Error, TData> => ({
    queryKey: constellationQueryKeys.getOptionByid(client?.contractAddress, args),
    queryFn: () => client.getOptionByid({
      id: args.id
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  createorOptions: <TData = ArrayOfTupleOfUint64AndData,>({
    client,
    args,
    options
  }: ConstellationCreateorOptionsQuery<TData>): UseQueryOptions<ArrayOfTupleOfUint64AndData, Error, TData> => ({
    queryKey: constellationQueryKeys.createorOptions(client?.contractAddress, args),
    queryFn: () => client.createorOptions({
      addr: args.addr
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ownerOptions: <TData = ArrayOfTupleOfUint64AndData,>({
    client,
    args,
    options
  }: ConstellationOwnerOptionsQuery<TData>): UseQueryOptions<ArrayOfTupleOfUint64AndData, Error, TData> => ({
    queryKey: constellationQueryKeys.ownerOptions(client?.contractAddress, args),
    queryFn: () => client.ownerOptions({
      addr: args.addr
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getIsApprove: <TData = Boolean,>({
    client,
    args,
    options
  }: ConstellationGetIsApproveQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: constellationQueryKeys.getIsApprove(client?.contractAddress, args),
    queryFn: () => client.getIsApprove({
      owner: args.owner,
      spender: args.spender
    }),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface ConstellationReactQuery<TResponse, TData = TResponse> {
  client: ConstellationQueryClient;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface ConstellationGetIsApproveQuery<TData> extends ConstellationReactQuery<Boolean, TData> {
  args: {
    owner: string;
    spender: string;
  };
}
export function useConstellationGetIsApproveQuery<TData = Boolean>({
  client,
  args,
  options
}: ConstellationGetIsApproveQuery<TData>) {
  return useQuery<Boolean, Error, TData>(constellationQueryKeys.getIsApprove(client.contractAddress, args), () => client.getIsApprove({
    owner: args.owner,
    spender: args.spender
  }), options);
}
export interface ConstellationOwnerOptionsQuery<TData> extends ConstellationReactQuery<ArrayOfTupleOfUint64AndData, TData> {
  args: {
    addr: string;
  };
}
export function useConstellationOwnerOptionsQuery<TData = ArrayOfTupleOfUint64AndData>({
  client,
  args,
  options
}: ConstellationOwnerOptionsQuery<TData>) {
  return useQuery<ArrayOfTupleOfUint64AndData, Error, TData>(constellationQueryKeys.ownerOptions(client.contractAddress, args), () => client.ownerOptions({
    addr: args.addr
  }), options);
}
export interface ConstellationCreateorOptionsQuery<TData> extends ConstellationReactQuery<ArrayOfTupleOfUint64AndData, TData> {
  args: {
    addr: string;
  };
}
export function useConstellationCreateorOptionsQuery<TData = ArrayOfTupleOfUint64AndData>({
  client,
  args,
  options
}: ConstellationCreateorOptionsQuery<TData>) {
  return useQuery<ArrayOfTupleOfUint64AndData, Error, TData>(constellationQueryKeys.createorOptions(client.contractAddress, args), () => client.createorOptions({
    addr: args.addr
  }), options);
}
export interface ConstellationGetOptionByidQuery<TData> extends ConstellationReactQuery<Data, TData> {
  args: {
    id: number;
  };
}
export function useConstellationGetOptionByidQuery<TData = Data>({
  client,
  args,
  options
}: ConstellationGetOptionByidQuery<TData>) {
  return useQuery<Data, Error, TData>(constellationQueryKeys.getOptionByid(client.contractAddress, args), () => client.getOptionByid({
    id: args.id
  }), options);
}
export interface ConstellationOptionsPageQuery<TData> extends ConstellationReactQuery<ArrayOfTupleOfUint64AndData, TData> {
  args: {
    amount: number;
    key: number;
  };
}
export function useConstellationOptionsPageQuery<TData = ArrayOfTupleOfUint64AndData>({
  client,
  args,
  options
}: ConstellationOptionsPageQuery<TData>) {
  return useQuery<ArrayOfTupleOfUint64AndData, Error, TData>(constellationQueryKeys.optionsPage(client.contractAddress, args), () => client.optionsPage({
    amount: args.amount,
    key: args.key
  }), options);
}
export interface ConstellationOptionsQuery<TData> extends ConstellationReactQuery<ArrayOfTupleOfUint64AndData, TData> {}
export function useConstellationOptionsQuery<TData = ArrayOfTupleOfUint64AndData>({
  client,
  options
}: ConstellationOptionsQuery<TData>) {
  return useQuery<ArrayOfTupleOfUint64AndData, Error, TData>(constellationQueryKeys.options(client.contractAddress), () => client.options(), options);
}
export interface ConstellationConfigQuery<TData> extends ConstellationReactQuery<State, TData> {}
export function useConstellationConfigQuery<TData = State>({
  client,
  options
}: ConstellationConfigQuery<TData>) {
  return useQuery<State, Error, TData>(constellationQueryKeys.config(client.contractAddress), () => client.config(), options);
}