/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Coin, QueryMsg, Addr, State, Timestamp, Uint64, ArrayOfTupleOfUint64AndData, Data } from "./Constellation.types";
export interface ConstellationReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<State>;
  options: () => Promise<ArrayOfTupleOfUint64AndData>;
  optionsPage: ({
    amount,
    key
  }: {
    amount: number;
    key: number;
  }) => Promise<ArrayOfTupleOfUint64AndData>;
  getOptionByid: ({
    id
  }: {
    id: number;
  }) => Promise<Data>;
  marketOptions: () => Promise<ArrayOfTupleOfUint64AndData>;
  maketOptionsPagee: ({
    amount,
    key
  }: {
    amount: number;
    key: number;
  }) => Promise<ArrayOfTupleOfUint64AndData>;
  createorOptions: ({
    addr
  }: {
    addr: string;
  }) => Promise<ArrayOfTupleOfUint64AndData>;
  ownerOptions: ({
    addr
  }: {
    addr: string;
  }) => Promise<ArrayOfTupleOfUint64AndData>;
}
export class ConstellationQueryClient implements ConstellationReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.options = this.options.bind(this);
    this.optionsPage = this.optionsPage.bind(this);
    this.getOptionByid = this.getOptionByid.bind(this);
    this.marketOptions = this.marketOptions.bind(this);
    this.maketOptionsPagee = this.maketOptionsPagee.bind(this);
    this.createorOptions = this.createorOptions.bind(this);
    this.ownerOptions = this.ownerOptions.bind(this);
  }

  config = async (): Promise<State> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  options = async (): Promise<ArrayOfTupleOfUint64AndData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      options: {}
    });
  };
  optionsPage = async ({
    amount,
    key
  }: {
    amount: number;
    key: number;
  }): Promise<ArrayOfTupleOfUint64AndData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      options_page: {
        amount,
        key
      }
    });
  };
  getOptionByid = async ({
    id
  }: {
    id: number;
  }): Promise<Data> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_option_byid: {
        id
      }
    });
  };
  marketOptions = async (): Promise<ArrayOfTupleOfUint64AndData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      market_options: {}
    });
  };
  maketOptionsPagee = async ({
    amount,
    key
  }: {
    amount: number;
    key: number;
  }): Promise<ArrayOfTupleOfUint64AndData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      maket_options_pagee: {
        amount,
        key
      }
    });
  };
  createorOptions = async ({
    addr
  }: {
    addr: string;
  }): Promise<ArrayOfTupleOfUint64AndData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      createor_options: {
        addr
      }
    });
  };
  ownerOptions = async ({
    addr
  }: {
    addr: string;
  }): Promise<ArrayOfTupleOfUint64AndData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner_options: {
        addr
      }
    });
  };
}
export interface ConstellationInterface extends ConstellationReadOnlyInterface {
  contractAddress: string;
  sender: string;
  create: ({
    counterOffer,
    timeStamp
  }: {
    counterOffer: Coin[];
    timeStamp: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addToMarket: ({
    amount,
    denom,
    id
  }: {
    amount: number;
    denom: string;
    id: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeFromMarket: ({
    id
  }: {
    id: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  buy: ({
    id
  }: {
    id: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updatePrice: ({
    id,
    price
  }: {
    id: number;
    price: Coin[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  transfer: ({
    id,
    to
  }: {
    id: number;
    to: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  execute: ({
    id
  }: {
    id: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  burn: ({
    id
  }: {
    id: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claim: ({
    id
  }: {
    id: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class ConstellationClient extends ConstellationQueryClient implements ConstellationInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.create = this.create.bind(this);
    this.addToMarket = this.addToMarket.bind(this);
    this.removeFromMarket = this.removeFromMarket.bind(this);
    this.buy = this.buy.bind(this);
    this.updatePrice = this.updatePrice.bind(this);
    this.transfer = this.transfer.bind(this);
    this.execute = this.execute.bind(this);
    this.burn = this.burn.bind(this);
    this.claim = this.claim.bind(this);
  }

  create = async ({
    counterOffer,
    timeStamp
  }: {
    counterOffer: Coin[];
    timeStamp: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create: {
        counter_offer: counterOffer,
        time_stamp: timeStamp
      }
    }, fee, memo, _funds);
  };
  addToMarket = async ({
    amount,
    denom,
    id
  }: {
    amount: number;
    denom: string;
    id: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_to_market: {
        amount,
        denom,
        id
      }
    }, fee, memo, _funds);
  };
  removeFromMarket = async ({
    id
  }: {
    id: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_from_market: {
        id
      }
    }, fee, memo, _funds);
  };
  buy = async ({
    id
  }: {
    id: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy: {
        id
      }
    }, fee, memo, _funds);
  };
  updatePrice = async ({
    id,
    price
  }: {
    id: number;
    price: Coin[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_price: {
        id,
        price
      }
    }, fee, memo, _funds);
  };
  transfer = async ({
    id,
    to
  }: {
    id: number;
    to: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer: {
        id,
        to
      }
    }, fee, memo, _funds);
  };
  execute = async ({
    id
  }: {
    id: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute: {
        id
      }
    }, fee, memo, _funds);
  };
  burn = async ({
    id
  }: {
    id: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      burn: {
        id
      }
    }, fee, memo, _funds);
  };
  claim = async ({
    id
  }: {
    id: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {
        id
      }
    }, fee, memo, _funds);
  };
}